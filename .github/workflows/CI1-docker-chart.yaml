name: CI. Dockerimage and Chart appVersion

on:
  release:
    types: [published]
  push:
    tags:
      - "v*.*"
#    branches:
#      - 'main'

env:
    # REQUIREMENTS
    # secrets.SLACK_TOKEN
    # secrets.DOCKERHUB_TOKEN
    # secrets.BOT_GITHUB_TOKEN
    
    SLACK_CHANNEL_ID: 'C04LZC84A9X'
    DHUB_USER_NAME: ${{ github.actor }} # used to login dockerhub
    IMAGE_NAME: "academy-wordpress" # used to set image name in dockerhub
    IMAGE_TAG: ${{  github.ref_name }} # used to set TAG image in dockerhub and Helm Chart
    RESULT_FILE: result.log # used as artifact
    WAITING_TIMER: 5 # used in sleep before checking and collecting stats
    ARTIFACT: result-artifact # name of using acrtifact
    GITHUB_WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    DOCKERFILE_PATH : ./Docker

jobs:
  docker:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      repository-projects: write
    outputs:
      out-job-status: ${{ job.status }}
    steps:
      - 
        name: Check out the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
#      - 
#        name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      -
#        name: Build and upload docker image
#        uses: docker/build-push-action@v3
#        with:
#          context: ${{ env.DOCKERFILE_PATH }}
#          push: false
#          load: true
#          tags: |
#            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#            ${{ env.DHUB_USER_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#            ${{ env.DHUB_USER_NAME }}/${{ env.IMAGE_NAME }}:latest
#      -
#        name: Show images
#        run: |
#          docker images
#      - 
#        name: Run doker image
#        run: |
#          docker run -d --rm -p 80:80 --name ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#          sleep ${{ env.WAITING_TIMER }}
#          echo "Docker list running containers:" >> ${{ env.RESULT_FILE }}
#          docker ps >> ${{ env.RESULT_FILE }}
#      - 
#        name: Testing Doker Container with CURL
#        run: |
#          echo -e "\nGet HTTP headers:" >> ${{ env.RESULT_FILE }}
#          curl -I http://localhost:80 >> ${{ env.RESULT_FILE }}
#          echo "Basic Curl GET request:"  >> ${{ env.RESULT_FILE }}
#          curl http://localhost:80 >> ${{ env.RESULT_FILE }}
#      - 
#        name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ env.DHUB_USER_NAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      -
#        name: Push image to Docker Hub
#        run: |
#          docker push ${{ env.DHUB_USER_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#          docker push ${{ env.DHUB_USER_NAME }}/${{ env.IMAGE_NAME }}:latest
#          echo -e "\n\nImage was pushed to DockerHub as:"  >> ${{ env.RESULT_FILE }}
#          echo "${{ env.DHUB_USER_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"  >> ${{ env.RESULT_FILE }}
      - 
        name: Make chart version form tag (last 5 chars)
        id: chart_v
        run: |
          echo "chart_v=$(echo -n ${{ env.IMAGE_TAG }} | tail -c 5)" >> $GITHUB_OUTPUT
      - 
        name: Update, tag and push new appVersion in Chart
        run: |
          git config --local user.email "github@github.com"
          git config --local user.name "GitHub Action"
          sed -i "s/^appVersion:.*$/appVersion: ${{ env.IMAGE_TAG }}/" ./Helm/wp-project/helm-source/Chart.yaml
          sed -i "s/^version:.*$/version: ${{ steps.chart_v.outputs.chart_v }}/" ./Helm//wp-project/helm-source/Chart.yaml
          git add ./Helm/wp-project/helm-source/Chart.yaml
          git commit -m "Workflow: New Chart: ${{ env.IMAGE_TAG }}"
          git tag chart-${{ env.IMAGE_TAG }}
      -
        name: Push changes
        uses: ad-m/github-push-action@master
        with:
          tags: true
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ env.RESULT_FILE }}

  slack:
    needs: [docker]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - 
        name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          slack-message: |
            GitHub image build result: ${{ needs.docker.outputs.out-job-status }}
            Image was pushed to DockerHub as:
            ${{ env.DHUB_USER_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            Helm Chart appVersion was changed to: ${{ env.IMAGE_TAG }}
            Commit: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}
            Action URL: ${{ env.GITHUB_WORKFLOW_URL }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}

  slack_artifact:
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      - 
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT }}
      -
        name: Upload to slack artifact file
        uses: adrey/slack-file-upload-action@master
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          path: ${{ env.RESULT_FILE }}
          channel: academy_project